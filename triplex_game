#include "std_lib_facilities.h"
#include <ctime>

void Printintroduction(int Difficulty)
{
	cout << "\n\nTe egy titkos ügynök vagy aki egy \n" << Difficulty;
	cout << " -es szintű biztonsági rendszert szeretne feltörni... \nÍrd be a biztonsági kódot a folytatáshoz...\n\n";
}



bool PlayGame(int Difficulty)
{
	//print welcome massage to the terminal
	Printintroduction(Difficulty);


	// declare 3 number code
	const int CodeA = rand() % Difficulty +1;
	const int CodeB = rand() % Difficulty +1;
	const int CodeC = rand() % Difficulty +1;

	const int CodeSum = CodeA + CodeB + CodeC;
	const int CodeProduct = CodeA * CodeB * CodeC;


	// print CodeSum and product to the terminal
	cout << "+ A kód három számjegyből áll!";
	cout << "\n+ A kód számjegyeinek összege: " << CodeSum;
	cout << "\n+ A kód számjegyeinek szorzata: " << CodeProduct << endl;

	// Store player guess
	int GuessA, GuessB, GuessC;
	cin >> GuessA;
	cin >> GuessB;
	cin >> GuessC;

	int GuessSum = GuessA + GuessB + GuessC;
	int GuessProduct = GuessA * GuessB * GuessC;

	// Check if the guess is correct
	if (GuessSum == CodeSum && GuessProduct == CodeProduct)
	{
		cout << "\n*** Gratulálok ügynük, feltörted a fájlt, így tovább! ***";
		return true;
	}
	else
	{
		cout << "\n*** Rossz kódot adtál meg, óvatosan próbálkozz! ***";
		return false;
	}
}



int main()
{
	srand(time(NULL)); //Create new random sequence based on time o day

	int LevelDifficulty = 1;
	int const MaxDifficulty = 5;

	while (LevelDifficulty <= MaxDifficulty) //Loop auntil all levels get completed
	{
		bool bLevelComplete = PlayGame(LevelDifficulty);
		cin.clear(); //Clears errors
		cin.ignore(); //Discard the buffer

		if (bLevelComplete)
		{
			++LevelDifficulty;

		}

	}

	cout << "\n*** Szép munka ügynök, feltörted az összes fájlt, most pedig lépj ki innen!!! ***\n";
	
	return 0;
}
